{"ts":1361914421636,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1361914441017,"patch":[[{"diffs":[[1,"module PBDeskJS {\n\n    export class StrUtils {\n        \n        static StripHTML(originalStr: string, replacerStr?: string = \"\"): string {\n            var regex = /<\\S[^><]*>/g;\n            return originalStr.replace(regex, replacerStr);\n        }\n\n        static IsValidEmail(sText: string): bool {\n            var regexEmail = /^(?:\\w+\\.?)*\\w+@(?:\\w+\\.)+\\w+$/;\n            return regexEmail.test(sText);\n        }\n\n        static IsValidUrl(originalStr: string): bool {\n            var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\n            return regexp.test(originalStr);\n        }\n\n        static IsEmpty(text: string): bool {\n            var editorTextLength = text.replace(/\\s+|\\n+|\\t+/g, \"\").length;\n            return editorTextLength === 0;\n        }\n\n        static StripHTMLAndTrim(text: string): string {\n            var htmlStriper = /<(?:.|\\s)*?>/g;\n            text = text.replace(htmlStriper, \" \");\n            while (text.indexOf(\"  \") >= 0) {\n                text = text.replace(\"  \", \" \");\n            }\n            return text.replace(/^\\s+|\\s+$/g, \"\");\n        }\n\n        static Trim(text: string): string {\n            return text.replace(/^\\s+|\\s+$/g, \"\");\n        }\n\n        static LTrim(text: string): string {\n            return text.replace(/^\\s+/, \"\");\n        }\n\n        static RTrim(text: string): string {\n            return text.replace(/\\s+$/, \"\");\n        }\n\n        static Format(text: string): string {\n            //check if there are two arguments in the arguments list\n            if (arguments.length <= 1) {\n                //if there are not 2 or more arguments there's nothing to replace\n                //just return the original text\n                return text;\n            }\n\n            //decrement to move to the second argument in the array\n            var tokenCount = arguments.length - 2;\n            for (var token = 0; token <= tokenCount; token++) {\n                //iterate through the tokens and replace their placeholders from the original text in order\n                text = text.replace(new RegExp(\"\\\\{\" + token + \"\\\\}\", \"gi\"),\n                                                        arguments[token + 1]);\n            }\n            return text;\n        }\n        \n\n    }\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":2288}]],"length":2288,"saved":false}
